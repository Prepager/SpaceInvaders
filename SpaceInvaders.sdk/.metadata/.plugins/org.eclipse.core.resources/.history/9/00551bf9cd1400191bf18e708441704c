#include "GameLogic.h"

/**
 * Initialize the game resources.
 */
GameLogic::GameLogic() {
	// Create status variable.
	int status;

	// Create and initialize new rendering engine.
	status = this->renderer.initialize();
	if (! status) {
		xil_printf("Failed to initialize renderer.\r\n");
		exit(EXIT_FAILURE);
		return;
	}
}

/**
 * Launch the game logic.
 */
int GameLogic::launch() {
	// Add the game scene object.
	this->renderer.addObject(
		new Scene(DISPLAY_WIDTH, DISPLAY_HEIGHT)
	);

	// Generate the game enemies.
	this->generateEnemies();

	// Start game infinity loop.
	while (1) {
		// TODO: Game logic

		// Render the game.
		this->renderer.render();
	}

	// Return loop failed.
	return 0;
}

/**
 *
 */
void GameLogic::generateEnemies() {
	//
	u32 width = 40, height = 40;
	u32 x = 10, y = 10;

	//
	//for (int row = 0; col < ENEMY_ROWS; row++) {
		//
		for (int col = 0; col < 4/*ENEMY_COLS-4*/; col++) {
			//
			this->renderer.addObject(new Enemy(
				width, height,
				x, y
			));

			//
			x += width+10;
		}
	//}

	//
	/*for (int i = 0; i < 8; i++) {
		// Create new enemy with given details.
		/*this->enemies[i] = new Enemy(
			width, height,
			x, y
		);*/

		// Add the object to the rendering list.
		/*this->renderer.addObject(new Enemy(
			width, height,
			x, y
		));

		//
		x += width+10;
		y += height+10;*/

		// Jump to next line for every 11th enemies.
		/*if (i == 11) {
			y += height;
		}*/
		/*if (i % 11 == 0) {
			y += height;
		}*/
	//}
}
