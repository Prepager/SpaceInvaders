// Header
#include "Bullet.h"

// Paint the bullet.
void paintBullet(Bullet *bullet, u8 *frame) {
	// Generate the frame address for the starting position.
	int addr = (bullet->xPos * 3) + (bullet->yPos * STRIDE);

	// Loop through the height and set data.
	for (int ycoi = 0; ycoi < BULLET_HEIGHT; ycoi++) {
		// Draw single white pixel.
		memset(&frame[addr], 255, BULLET_WIDTH * 3);

		// Jump to next line.
		addr += STRIDE;
	}
}

// Depaint the bullet.
void depaintBullet(Bullet *bullet, u8 *frame) {
	// Generate the frame address for the starting position.
	int addr = (bullet->xPos * 3) + (bullet->yPos * STRIDE);

	// Loop through the height and set data.
	for (int ycoi = 0; ycoi < BULLET_HEIGHT; ycoi++) {
		// Draw the background color.
		memset(&frame[addr], BACKGROUND, BULLET_WIDTH * 3);

		// Jump to next line.
		addr += STRIDE;
	}
}

// Position the bullet.
void positionBullet(Bullet *bullet) {
	// Change vertical position based on direction.
	if (bullet->direction) {
		bullet->yPos -= BULLET_MOVEMENT;
	} else {
		bullet->yPos += BULLET_MOVEMENT;
	}

	//todo
	if (bullet->yPos < BULLET_HEIGHT || bullet->yPos > (DISPLAY_HEIGHT - BULLET_HEIGHT)) {
		delete bullet;
	}

	/*if (bullet->height == 1) {
		delete bullet;
	} else {
		//
		if (bullet->yPos )
	}*/

	// todo
	//if (bullet->yPos <= 0)

	/*if (bullet->yPos <= 0) {
		bullet->yPos = 0;
	} else if (bullet->yPos >= (DISPLAY_HEIGHT - 3)) {
		bullet->yPos = DISPLAY_HEIGHT - 3;
	}*/
}
